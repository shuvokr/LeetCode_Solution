// https://leetcode.com/problems/repeated-substring-pattern/description/

class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        long long len = s.size(), hash[len + 2], base = 10000007, mod = 1000000007, p = 1ll, total = 0, temp;
        hash[len] = 0;
        for(int i = len - 1; i > -1; i--)
        {
            total = total + (s[i] * p) % mod;
            total %= mod;
            hash[ i ] = total;
            p = (p * base) % mod;
        }
        
        for(int i = 0; i < len - 1; i++)
        {
            if(len % (i+1) != 0) continue;
            total = (hash[0] - hash[i + 1] + mod + mod) % mod;
            p = 0;
            bool mark = true;
            for(int j = i; j < len; j += i + 1)
            {
                temp = (hash[j - i] - hash[j + 1] + mod + mod) % mod;
                temp = (temp * bigmod(base, p, mod)) % mod;
                //cout << temp << " " << total << endl; 
                if(temp != total)
                {
                    mark = false;
                    break;
                }
                p = p + i + 1;
            }
            //puts("******");
            if(mark) return true;
        }
        return false;
    }
    long long bigmod ( long long a, long long p, long long mod )
    {
        long long res = 1, x = a;
        while ( p ) {
            if ( p & 1 ) res = ( res * x ) % mod;
            x = ( x * x ) % mod;
            p >>= 1;
        }
        return res;
    }
};
